import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{a as e,e as a,o as n}from"./app-D6iaZkZz.js";const l={};function t(h,i){return n(),e("div",null,i[0]||(i[0]=[a(`<h1 id="创建-ssl-证书" tabindex="-1"><a class="header-anchor" href="#创建-ssl-证书"><span>创建 SSL 证书</span></a></h1><p>本页将为您介绍如何为面板和 Wings 创建新的 SSL 证书</p><p>:::: tabs @tab 方法 1: Certbot 首先,我们将安装 Certbot,这是一个脚本文件,它可以自动更新证书并一键创建证书。下面的命令只适合 Ubuntu，但您可以在 <a href="https://certbot.eff.org/" target="_blank" rel="noopener noreferrer">Certbot 官方网站</a>查看相关安装说明,我们这里包含了安装 Certbot 必要的Nginx或Apache插件的指令,这样妈妈再也不用担心我需要迁移环境了!</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> apt</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> update</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> apt</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -y</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> certbot</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Nginx 插件</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> apt</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -y</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> python3-certbot-nginx</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Apache 插件</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> apt</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -y</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> python3-certbot-apache</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建证书" tabindex="-1"><a class="header-anchor" href="#创建证书"><span>创建证书</span></a></h2><p>安装Certbot之后我们需要生成一个证书,最简单的方法就是安装Web服务器的Certbot插件,如果没有Web服务器的话就需要DNS验证了</p><p>在下面命令中,请您替换 <code>example.com</code> 域名为您自己需要生成证书的域名,当您需要申请多个域名的证书时可以在每个域名前面添加 <code>-d</code> 参数 ，列如 <code>-d anotherdomain.com</code>，当然您还可以考虑生成通配符证书，但本教程未涉及。</p><h3 id="http-验证" tabindex="-1"><a class="header-anchor" href="#http-验证"><span>HTTP 验证</span></a></h3><p>HTTP 验证需要您开放服务器 80 端口来进行验证</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Nginx</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">certbot</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> certonly</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --nginx</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> example.com</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Apache</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">certbot</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> certonly</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --apache</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> example.com</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 如果以上两者都不起作用您可以试试这个,但是用之前请确保Web服务器已经关闭</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">certbot</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> certonly</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --standalone</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> example.com</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dns-验证" tabindex="-1"><a class="header-anchor" href="#dns-验证"><span>DNS 验证</span></a></h3><p>DNS 验证要求您去您的域名购买商那里解析相应的TXT DNS记录值以验证域名所有权，而不必公开 80 端口。在运行下面的 certbot 命令时会显示说明。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">certbot</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> example.com</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --manual</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --preferred-challenges</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dns</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> certonly</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="自动续签" tabindex="-1"><a class="header-anchor" href="#自动续签"><span>自动续签</span></a></h3><p>您可以配置证书自动续签以防止证书过期,您可以使用 <code>sudo crontab -e</code> 打开 crontab 来添加下面的代码,该代码将在每天 23点 (晚上11点)都会检查一遍SSL证书是否过期并尝试续签</p><p>部署成功后将会自动重启 Nginx 并应用新的 SSL 证书,您可以将 <code>systemctl restart nginx</code> 中的 <code>nginx</code> 更改为 <code>apache</code> 或 <code>wings</code></p><p>对更高级的用户来说,我们建议使用 <a href="https://acme.sh" target="_blank" rel="noopener noreferrer">acme.sh</a> ，它提供了更多更强大的功能</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>0 23 * * * certbot renew --quiet --deploy-hook &quot;systemctl restart nginx&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="疑难解答" tabindex="-1"><a class="header-anchor" href="#疑难解答"><span>疑难解答</span></a></h3><p>如果您在尝试访问面板或 Wings 时遇到 <code>不安全连接</code> 或 SSL/TLS 相关的错误时,有可能是您的 SSL 证书过期了,您可以通过更新 SSL 证书来解决,如果您的 80 端口正在被占用那就无法使用 <code>certbot-renew</code> 来完成自动续签</p><p>如果您运行的是 Nginx,在运行 Certbot 并附带有 <code>-nginx</code> 时出现报错您可以先停止 Nginx 服务后来续签证书，然后再启动 Nginx,如果您在为 Wings 续签证书，那你可以替换为 <code>wings</code></p><p>停止 Nginx:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">systemctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> stop</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nginx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>续签证书:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">certbot</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> renew</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在完成续签后请使用下面的命令来重启 Nginx:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">systemctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> start</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nginx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>您可能还需要重新启动 Wings，因为并非每个服务都能够自动应用更新的证书：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">systemctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> restart</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> wings</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>@tab 方法 2: acme.sh (使用 Cloudflare API) 该方法适合高级用户和无法开放80端口的用户, 下面的命令适用于 Ubuntu 和 Cloudflare API,您可以查看 <a href="https://github.com/acmesh-official/acme.sh" target="_blank" rel="noopener noreferrer">acme.sh 的官方网站</a> 来获取相关说明。请务必阅读这两个说明，因为有些人可能已经迁移到 CloudFlare 的<a href="https://blog.cloudflare.com/permissions-best-practices" target="_blank" rel="noopener noreferrer">新授权系统</a>（新版），但其他人<a href="https://cloudflare.tv/event/ea8JJLgR" target="_blank" rel="noopener noreferrer">尚未迁移</a>（旧版）。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">curl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://get.acme.sh</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="获取-cloudflare-api-密钥-旧版" tabindex="-1"><a class="header-anchor" href="#获取-cloudflare-api-密钥-旧版"><span>获取 Cloudflare API 密钥（旧版）</span></a></h3><p>安装 acme.sh 后，我们需要获取 CloudFlare API 密钥。 在 Cloudfare 的网站上，选择您的域名，然后在右侧复制您的 “区域 ID” 和 “帐户 ID”，然后单击 “获取您的 API 令牌”，单击 “创建令牌” &gt; 选择模板 “编辑区域 DNS” &gt; 选择 “区域资源” 的范围，然后单击 “继续以显示摘要”，复制您的令牌。</p><h3 id="申请证书" tabindex="-1"><a class="header-anchor" href="#申请证书"><span>申请证书</span></a></h3><p>由于配置文件基于 Certbot,所以我们需要手动创建一个文件夹</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mkdir</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /etc/letsencrypt/live/example.com</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>安装 acme 之后执行它并获取 Cloudflare 的 API 密钥,然后输入 Cloudflare 的 API 凭据来生成证书</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> CF_Token</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Your_CloudFlare_API_Key&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> CF_Account_ID</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Your_CloudFlare_Account_ID&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> CF_Zone_ID</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Your_CloudFlare_Zone_ID&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取-cloudflare-api-密钥-新版" tabindex="-1"><a class="header-anchor" href="#获取-cloudflare-api-密钥-新版"><span>获取 CloudFlare API 密钥（新版）</span></a></h3><p>安装 acme.sh 后，我们需要获取 CloudFlare API 密钥。在 Cloudflare 的网站上，点击右上角的个人资料。然后进入“我的资料”，在左侧找到“API 令牌”。点击它会带你到 <a href="https://dash.cloudflare.com/profile/api-tokens" target="_blank" rel="noopener noreferrer">API 令牌页面</a>。选择“创建令牌”并使用“编辑区域 DNS”模板。然后在下一页，进入“区域资源”并选择“包含” - “特定区域” - （选择你要使用的域）。然后继续到摘要。确认你想创建令牌。</p><h3 id="创建证书-1" tabindex="-1"><a class="header-anchor" href="#创建证书-1"><span>创建证书</span></a></h3><p>由于配置文件基于 Certbot，我们需要手动创建文件夹。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mkdir</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /etc/letsencrypt/live/example.com</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>安装 acme.sh 并获取 CloudFlare API 密钥后，我们需要生成证书。首先，输入 CloudFlare API 凭证。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> CF_Key</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Your_CloudFlare_API_Key&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> CF_Email</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Your_CloudFlare_Email&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后创建证书。由于 API 密钥绑定到域名，Cloudflare 应该只允许你生成一个。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">acme.sh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --issue</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --dns</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dns_cf</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;example.com&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> letsencrypt</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">--key-file </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/etc/letsencrypt/live/example.com/privkey.pem</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">--fullchain-file </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/etc/letsencrypt/live/example.com/fullchain.pem</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自动续签-1" tabindex="-1"><a class="header-anchor" href="#自动续签-1"><span>自动续签</span></a></h3><p>第一次运行脚本后,它将自动添加到 crontab,您可以使用以下命令来编辑自动续订间隔</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> crontab</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -e</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>@tab 方法 3: Caddy（使用 Cloudflare API） 这适用于高级用户，他们正在使用 Cloudflare 代理模式或无法访问端口 <code>80</code>.</p><h3 id="使用-cloudflare-dns-插件安装-caddy" tabindex="-1"><a class="header-anchor" href="#使用-cloudflare-dns-插件安装-caddy"><span>使用 Cloudflare DNS 插件安装 Caddy</span></a></h3><p>Caddy 默认不带有 Cloudflare DNS 插件，您需要自行安装。</p><p>有两种主要方法:</p><ol><li>使用 <code>xcaddy</code> - 用于构建自己的 Caddy 版本的 CLI 工具</li><li>从 <a href="https://caddyserver.com/download" target="_blank" rel="noopener noreferrer">Caddy 的下载页面</a>下载预构建的二进制文件。</li><li>使用 Ansible 下载并安装带有插件的 Caddy。请参阅 <a href="https://github.com/caddy-ansible/caddy-ansible" target="_blank" rel="noopener noreferrer">caddy-ansible</a></li></ol><h4 id="在您的服务器上使用-xcaddy-构建-caddy" tabindex="-1"><a class="header-anchor" href="#在您的服务器上使用-xcaddy-构建-caddy"><span>在您的服务器上使用 <code>xcaddy</code> 构建 Caddy</span></a></h4><p>请参阅 <a href="https://caddyserver.com/docs/build#xcaddy" target="_blank" rel="noopener noreferrer">Caddy 构建文档</a>。</p><h3 id="获取-cloudflare-api-令牌" tabindex="-1"><a class="header-anchor" href="#获取-cloudflare-api-令牌"><span>获取 CloudFlare API 令牌</span></a></h3><p>在安装 acme.sh 后，我们需要获取 CloudFlare API 密钥。请确保 DNS 记录（A 记录或 CNAME 记录）指向您的目标节点，并将云设置为灰色（绕过 CloudFlare 代理）。然后转到“我的配置文件”&gt;“API 密钥”，在全局 API 密钥子选项卡上，单击“查看”，输入您的 CloudFlare 密码，并将 API 密钥复制到剪贴板。</p><p>在安装带有 Cloudflare DNS 插件的 Caddy 后，我们需要获取 Cloudflare API 令牌。请确保 DNS 记录（A 记录或 CNAME 记录）指向您的目标节点。然后转到“我的配置文件”&gt;“API 令牌”，在 API 令牌上单击“创建令牌”。创建 API 令牌 &gt; API 令牌模板，在带有“编辑区域 DNS”的行末尾，单击“使用模板”。在<strong>区域资源</strong>下，选择您希望创建 API 令牌的 DNS 区域，单击“继续到摘要”。查看 API 令牌摘要，然后单击“创建令牌”。最后将 API 令牌复制到剪贴板。</p><h3 id="重新配置-caddy-以使用-cloudflare-dns-获取证书" tabindex="-1"><a class="header-anchor" href="#重新配置-caddy-以使用-cloudflare-dns-获取证书"><span>重新配置 Caddy 以使用 Cloudflare DNS 获取证书</span></a></h3><p>首先，您需要创建一个环境变量文件（例如 <code>.env</code>），请注意，此文件包含机密信息，不应该被公开访问。</p><p>我们建议您将此机密文件放在以下位置: <code>/etc/caddy/.secrets.env</code>。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">CLOUDFLARE_API_TOKEN</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">您的</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Cloudflare</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> API</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 令</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">牌&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>出于安全原因，我们建议将权限设置为 <code>0600</code> （只有所有者可以读取或写入文件）。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 将 \`.secrets.env\` 文件的所有权设置为 \`caddy\` 系统用户</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">chown</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> caddy:caddy</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /etc/caddy/.secrets.env</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 仅允许所有者读写权限 - 即 \`caddy\` 系统用户</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">chmod</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0600</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /etc/caddy/.secrets.env</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，修改 systemd 单元文件，以从文件加载环境变量（在 <code>ExecStart</code> 中添加 <code>--envfile /etc/caddy/.secrets.env</code> 标志）。默认的 systemd 单元文件位置是 <code>/etc/systemd/system/caddy.service</code>:</p><div class="language-unit line-numbers-mode" data-highlighter="shiki" data-ext="unit" data-title="unit" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[Unit]</span></span>
<span class="line"><span>Description=Caddy</span></span>
<span class="line"><span>Documentation=https://caddyserver.com/docs/</span></span>
<span class="line"><span>After=network.target network-online.target</span></span>
<span class="line"><span>Requires=network-online.target</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[Service]</span></span>
<span class="line"><span>Type=notify</span></span>
<span class="line"><span>User=caddy</span></span>
<span class="line"><span>Group=caddy</span></span>
<span class="line highlighted"><span>ExecStart=/usr/bin/caddy run --environ --envfile /etc/caddy/.secrets.env --config /etc/caddy/Caddyfile</span></span>
<span class="line"><span>ExecReload=/usr/bin/caddy reload --config /etc/caddy/Caddyfile</span></span>
<span class="line"><span>TimeoutStopSec=5s</span></span>
<span class="line"><span>LimitNOFILE=1048576</span></span>
<span class="line"><span>LimitNPROC=512</span></span>
<span class="line"><span>PrivateTmp=true</span></span>
<span class="line"><span>ProtectSystem=full</span></span>
<span class="line"><span>AmbientCapabilities=CAP_NET_BIND_SERVICE</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[Install]</span></span>
<span class="line"><span>WantedBy=multi-user.target</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，在您的面板配置的 <code>&lt;domain&gt;</code> 块下，您可以在 <code>Caddyfile</code> 中添加一个 <code>tls</code> 块。Caddy 配置文件的位置是 <code>/etc/caddy/Caddyfile</code>:</p><div class="language-caddyfile line-numbers-mode" data-highlighter="shiki" data-ext="caddyfile" data-title="caddyfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;domain&gt; {</span></span>
<span class="line"><span>  # ...</span></span>
<span class="line"><span></span></span>
<span class="line highlighted"><span>  tls {</span></span>
<span class="line highlighted"><span>    dns cloudflare {env.CLOUDFLARE_API_TOKEN}</span></span>
<span class="line highlighted"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>::::</p>`,71)]))}const p=s(l,[["render",t],["__file","creating_ssl_certificates.html.vue"]]),c=JSON.parse('{"path":"/tutorials/creating_ssl_certificates.html","title":"创建 SSL 证书","lang":"zh-CN","frontmatter":{"description":"创建 SSL 证书 本页将为您介绍如何为面板和 Wings 创建新的 SSL 证书 :::: tabs @tab 方法 1: Certbot 首先,我们将安装 Certbot,这是一个脚本文件,它可以自动更新证书并一键创建证书。下面的命令只适合 Ubuntu，但您可以在 Certbot 官方网站查看相关安装说明,我们这里包含了安装 Certbot 必要...","head":[["meta",{"property":"og:url","content":"https://pterodactyl.top/tutorials/creating_ssl_certificates.html"}],["meta",{"property":"og:site_name","content":"Pterodactyl-China"}],["meta",{"property":"og:title","content":"创建 SSL 证书"}],["meta",{"property":"og:description","content":"创建 SSL 证书 本页将为您介绍如何为面板和 Wings 创建新的 SSL 证书 :::: tabs @tab 方法 1: Certbot 首先,我们将安装 Certbot,这是一个脚本文件,它可以自动更新证书并一键创建证书。下面的命令只适合 Ubuntu，但您可以在 Certbot 官方网站查看相关安装说明,我们这里包含了安装 Certbot 必要..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-29T18:20:26.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-29T18:20:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"创建 SSL 证书\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-09-29T18:20:26.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"创建证书","slug":"创建证书","link":"#创建证书","children":[{"level":3,"title":"HTTP 验证","slug":"http-验证","link":"#http-验证","children":[]},{"level":3,"title":"DNS 验证","slug":"dns-验证","link":"#dns-验证","children":[]},{"level":3,"title":"自动续签","slug":"自动续签","link":"#自动续签","children":[]},{"level":3,"title":"疑难解答","slug":"疑难解答","link":"#疑难解答","children":[]},{"level":3,"title":"获取 Cloudflare API 密钥（旧版）","slug":"获取-cloudflare-api-密钥-旧版","link":"#获取-cloudflare-api-密钥-旧版","children":[]},{"level":3,"title":"申请证书","slug":"申请证书","link":"#申请证书","children":[]},{"level":3,"title":"获取 CloudFlare API 密钥（新版）","slug":"获取-cloudflare-api-密钥-新版","link":"#获取-cloudflare-api-密钥-新版","children":[]},{"level":3,"title":"创建证书","slug":"创建证书-1","link":"#创建证书-1","children":[]},{"level":3,"title":"自动续签","slug":"自动续签-1","link":"#自动续签-1","children":[]},{"level":3,"title":"使用 Cloudflare DNS 插件安装 Caddy","slug":"使用-cloudflare-dns-插件安装-caddy","link":"#使用-cloudflare-dns-插件安装-caddy","children":[]},{"level":3,"title":"获取 CloudFlare API 令牌","slug":"获取-cloudflare-api-令牌","link":"#获取-cloudflare-api-令牌","children":[]},{"level":3,"title":"重新配置 Caddy 以使用 Cloudflare DNS 获取证书","slug":"重新配置-caddy-以使用-cloudflare-dns-获取证书","link":"#重新配置-caddy-以使用-cloudflare-dns-获取证书","children":[]}]}],"git":{"createdTime":1532407839000,"updatedTime":1727634026000,"contributors":[{"name":"Dane Everitt","username":"Dane Everitt","email":"dane@daneeveritt.com","commits":2,"url":"https://github.com/Dane Everitt"},{"name":"Thien Tran","username":"Thien Tran","email":"42406302+Ethereal739@users.noreply.github.com","commits":1,"url":"https://github.com/Thien Tran"},{"name":"Riley","username":"Riley","email":"rileykotarba@gmail.com","commits":1,"url":"https://github.com/Riley"},{"name":"ckykenken","username":"ckykenken","email":"26035978+ckykenken@users.noreply.github.com","commits":1,"url":"https://github.com/ckykenken"},{"name":"DiscoverSquishy","username":"DiscoverSquishy","email":"noaimi2214@gmail.com","commits":1,"url":"https://github.com/DiscoverSquishy"},{"name":"DiscoverSquishy","username":"DiscoverSquishy","email":"github@discoversquishy.me","commits":1,"url":"https://github.com/DiscoverSquishy"},{"name":"Lance Pioch","username":"Lance Pioch","email":"git@lance.sh","commits":3,"url":"https://github.com/Lance Pioch"},{"name":"Omar Kamel","username":"Omar Kamel","email":"30291302+TekExplorer@users.noreply.github.com","commits":3,"url":"https://github.com/Omar Kamel"},{"name":"Purpur","username":"Purpur","email":"43528123+Pemigrade@users.noreply.github.com","commits":1,"url":"https://github.com/Purpur"},{"name":"GoldenEdit","username":"GoldenEdit","email":"45533337+GoldenEdit@users.noreply.github.com","commits":1,"url":"https://github.com/GoldenEdit"},{"name":"Thierry","username":"Thierry","email":"thierrylafeber@hotmail.com","commits":1,"url":"https://github.com/Thierry"},{"name":"Alex","username":"Alex","email":"admin@softwarenoob.com","commits":1,"url":"https://github.com/Alex"},{"name":"Khisab Kurniawan","username":"Khisab Kurniawan","email":"khisabkurniawan@outlook.com","commits":1,"url":"https://github.com/Khisab Kurniawan"},{"name":"SfTian","username":"SfTian","email":"52811930+saltedfisholdxu@users.noreply.github.com","commits":1,"url":"https://github.com/SfTian"},{"name":"BuildTools","username":"BuildTools","email":"unconfigured@null.spigotmc.org","commits":1,"url":"https://github.com/BuildTools"},{"name":"飒爽师叔","username":"飒爽师叔","email":"43847794+vlssu@users.noreply.github.com","commits":4,"url":"https://github.com/飒爽师叔"},{"name":"DeDiamondPro","username":"DeDiamondPro","email":"67508414+DeDiamondPro@users.noreply.github.com","commits":1,"url":"https://github.com/DeDiamondPro"},{"name":"BakiDance","username":"BakiDance","email":"43658058+BakiDance@users.noreply.github.com","commits":1,"url":"https://github.com/BakiDance"},{"name":"Boy132","username":"Boy132","email":"Boy132@users.noreply.github.com","commits":1,"url":"https://github.com/Boy132"},{"name":"Vojtech Mares","username":"Vojtech Mares","email":"iam@vojtechmares.com","commits":3,"url":"https://github.com/Vojtech Mares"},{"name":"Baptiste Ferrando","username":"Baptiste Ferrando","email":"53260217+Verttigo28@users.noreply.github.com","commits":1,"url":"https://github.com/Baptiste Ferrando"},{"name":"MaddDogg98","username":"MaddDogg98","email":"jdmon1998@gmail.com","commits":1,"url":"https://github.com/MaddDogg98"},{"name":"Stefano","username":"Stefano","email":"stefano@stefanocoding.me","commits":1,"url":"https://github.com/Stefano"},{"name":"Rowan","username":"Rowan","email":"37227235+rowansc1@users.noreply.github.com","commits":3,"url":"https://github.com/Rowan"}]},"readingTime":{"minutes":6.87,"words":2060},"filePathRelative":"tutorials/creating_ssl_certificates.md","localizedDate":"2018年7月24日","autoDesc":true}');export{p as comp,c as data};
